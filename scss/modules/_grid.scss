@mixin grid {

  //
  // Assing our grid vairable to global susy.
  $susy: $grid !global;
  $breakpoints: $breakpoints !global;

  $columns: map-get($susy, columns);
  $column-class: #{map-get($susy, column-class)};
  $push-class: #{map-get($susy, push-class)};
  $pull-class: #{map-get($susy, pull-class)};
  $last-class: #{map-get($susy, last-class)};

  @include grid-columns($columns, $column-class, $push-class, $pull-class, $last-class);

  @each $breakpoint_key, $breakpoint_value in $breakpoints {

    @include breakpoint($breakpoint_key){

      $breakpoint_char: str-slice($breakpoint_key, 0, 1);

      $bcolumn-class: #{$breakpoint_char + $column-class};
      $bpush-class: #{$breakpoint_char + $push-class};
      $bpull-class: #{$breakpoint_char + $pull-class};
      $blast-class: #{$breakpoint_char + $last-class};

      @include grid-columns($columns, $bcolumn-class, $bpush-class, $bpull-class, $blast-class);
    }
  }
}

@mixin grid-columns($columns, $column-class, $push-class, $pull-class, $last-class){

  //
  // Class that have common
  // properties for each column
  //
  %#{$column-class} {
    @include float-left;
    margin-right: gutter($columns);
  }

  //
  // Generating classes for the grid and
  // extending them of the %#{$column-class} class
  //

  @for $i from 1 through $columns{

    $column-class-full: #{$column-class}#{$i};
    $column-width: span($i of $columns);


    .#{$column-class-full}{
      width: $column-width;
      @extend %#{$column-class};
    }
  }

  .#{map-get($susy, push-class)}0 {
    margin-left: 0;
  }

  @for $i from 1 through $columns{

    .#{map-get($susy, push-class)}#{$i}{
      margin-left: span($i);
    }
  }

  .#{map-get($susy, pull-class)}0 {
    margin-right: 0;
  }

  @for $i from 1 through $columns{

    .#{map-get($susy, pull-class)}#{$i}{
      margin-right: span($i);
    }
  }

  //
  // Class for the last element
  //
  .#{map-get($susy, last-class)} {
    @include omega;
  }
}
