
/**
 * Function defining the difference between 2 colors
 *
 * @param {Color} $a - first color
 * @param {Color} $b - second color
 *
 * @return {Map}  The color operations to do in order to find $b from $a where keys are the color functions to apply and values are the values to pass to these functions
 */

@function color-diff($a, $b) {
  $sat: saturation($a) - saturation($b);
  $lig: lightness($a) - lightness($b);
  $fn-sat: if($sat > 0, 'desaturate', 'saturate');
  $fn-lig: if($lig > 0, 'darken', 'lighten');

  @return (
    adjust-hue: -(hue($a) - hue($b)),
    #{$fn-sat}: abs($sat),
    #{$fn-lig}: abs($lig)
  );
}

/**
 * Compute the diff for each color from the initial palette
 *
 * @param {Map} $palette - palette
 *
 * @requires {function} color-diff
 *
 * @return {List} list of diffs
 */

@function palette-diff($palette) {
  $base: map-get($palette, 'base');
  $colors: map-get($palette, 'colors');
  $diffs: ();

  @each $color in $colors {
    $diffs: append($diffs, color-diff($base, $color));
  }

  @return $diffs;
}

/**
 * Palette diffs
 * Same length as colors key from map-palette
 *
 * @type List
 */

$palette-diff: palette-diff($base-diff-palette);

/**
 * Apply differences returned from `color-diff` function to a color in order to retrieve the second color
 *
 * @param {Color} $color - color to transform
 * @param {Map} $diff - diff map
 *
 * @return {Color} transformed color
 */

@function apply-diff($color, $diff) {
  // We call the $key (function),
  // passing the $color and the $value as parameters
  // e.g. `call(adjust-hue, #BADA55, 42)`
  @each $function, $value in $diff {
    $color: call($function, $color, $value);
  }

  @return $color;
}

/**
 * Create a palette from a base color
 *
 * @param {Color} $base-color - base color for the palette
 *
 * @requires {function} palette-diff
 * @requires {function} apply-diff
 * @requires {variable} $base-diff-palette
 *
 * @return {List} list of colors
 */

@function create-palette($base-color) {
  $palette: ();

  @each $diff in $palette-diff {
    $palette: append($palette, apply-diff($base-color, $diff));
  }

  @return $palette;
}

/**
 * Create a list of colors from the base color
 * then turn in into a map with explicit keys
 *
 * @param {Color} $base-color - base color for the palette
 *
 * @requires {function} create-palette
 *
 * @return {Map}
 */

@function palette($base-color) {
  $colors: create-palette($base-color);
  $keys: '50' '100' '200' '300' '400' '500' '600' '700' '800' '900' 'A100' 'A200' 'A400' 'A700';
  $palette: ();

  @for $i from 1 through min(length($colors), length($keys)) {
    $palette: map-merge($palette, (nth($keys, $i): nth($colors, $i)));
  }

  @return $palette;
}

/**
 * Create and apply a palette
 *
 * @param {Color} $base-color - base color
 *
 * @requires {function} create-palette
 */

@mixin draw-palette($base-color) {

  $palette: create-palette($base-color);
  $length: length($palette);
  $color-stops: append((), nth($palette, 1), comma);
  $stop-size: 100 / $length;

  @for $i from 1 through $length {
    $color: nth($palette, $i);

    @if $i > 1 {
      $color-stops: append($color-stops, $color $stop-size * ($i - 1) * 1%);
    }

    $color-stops: append($color-stops, $color $stop-size * $i * 1%);
  }

  background: nth($palette, ceil($length / 2));
  background: linear-gradient(to right, $color-stops);
  content: "#{$palette}";
}

/**
 * Return color based on palette and tone
 *
 * @param {String} $palette-name - palette name
 * @param {String}  $palette-tone - base color
 *
 * @requires {Map} $base-palettes
 *
 * @return {Color}
 */

@function palette-color($palette-name, $palette-tone) {

    @if map-has-key($base-palettes, $palette-name) {

        $base-color: map-get($base-palettes, $palette-name);
        $palette: palette($base-color);

        @if map-has-key($palette, $palette-tone) {
            $color: map-get($palette, $palette-tone);

            @return $color;
        }

        @warn "There is no `#{$palette-tone}` in `#{$palette-name}`.";

        @return null;
    }

    @warn "There is no `#{$palette-name}` in #{$base-palettes} palette.";

    @return null;
}

/**
 * Create class helpers for color and background properties from pallete
 *
 * @param {String} $base-palette-name - palette name
 * @param {Color}  $base-palette-color - base color
 * @param {String} $helper-color-class - helper color class
 * @param {String} $helper-background-class - helper background class
 *
 * @requires {function} palette
 */

@mixin palette-helper($base-palette-name, $base-palette-color, $helper-color-class: 'cl-', $helper-background-class: 'bg-') {

    $palette: palette($base-palette-color);

    @each $palette_key, $palette_value in $palette {

        @include color-helper(
            $helper-color-class + '-' + $base-palette-name + '-' + $palette_key,
            $helper-background-class + '-' + $base-palette-name + '-' + $palette_key,
            $palette_value
        );
    }
}

/**
 * Create class helpers for color and background properties
 *
 * @param {String} $full-helper-color-class - full color helper class
 * @param {String} $full-helper-background-class - full background helper class
 * @param {Color}  $color - color
 */

@mixin color-helper($full-helper-color-class, $full-helper-background-class, $color) {

    .#{$full-helper-color-class} {
        color: $color;
    }

    .#{$full-helper-background-class} {
        background: $color;
    }
}
